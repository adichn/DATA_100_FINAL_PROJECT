library(RColorBrewer)
# Function to create categorical features
create_categorical_features <- function(data) {
data %>%
mutate(
Season = case_when(
format(Date, "%m") %in% c("12", "01", "02") ~ "Winter",
format(Date, "%m") %in% c("03", "04", "05") ~ "Spring",
format(Date, "%m") %in% c("06", "07", "08") ~ "Summer",
format(Date, "%m") %in% c("09", "10", "11") ~ "Autumn"
),
DayOfWeek = weekdays(Date),
Weekend = if_else(DayOfWeek %in% c("Saturday", "Sunday"), "Weekend", "Weekday"),
Month = format(Date, "%B"),
Hour = as.numeric(format(Time, "%H")),
TimeOfDay = case_when(
Hour >= 5 & Hour < 12 ~ "Morning",
Hour >= 12 & Hour < 17 ~ "Afternoon",
Hour >= 17 & Hour < 21 ~ "Evening",
TRUE ~ "Night"
),
TempCategory = case_when(
T < 10 ~ "Cold",
T >= 10 & T <= 25 ~ "Moderate",
T > 25 ~ "Hot"
),
HumidityLevel = case_when(
RH < 30 ~ "Low",
RH >= 30 & RH <= 60 ~ "Medium",
RH > 60 ~ "High"
)
)
}
# Function to handle outliers and missing values
clean_data <- function(data, pollutant_columns) {
data %>%
group_by(Season) %>%
mutate(
across(all_of(pollutant_columns),
~ ifelse(. > quantile(., 0.95, na.rm = TRUE),
median(., na.rm = TRUE), .))
) %>%
ungroup() %>%
mutate(
across(c(`NOx(GT)`, `NO2(GT)`), ~ na_if(., -200))
) %>%
drop_na()
}
# Function to create derived features
create_derived_features <- function(data) {
data %>%
mutate(
across(c(T, RH, AH), ~ (. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE)),
Temp_Humidity_Interaction = T * RH,
CO_Temp_Interaction = `CO(GT)` * T
) %>%
arrange(Date, Time) %>%
mutate(
Rolling_CO = rollmean(`CO(GT)`, k = 5, fill = NA)
)
}
# Function to create correlation matrix plot
plot_correlation_matrix <- function(data) {
numeric_cols <- data %>%
select(where(is.numeric))
cor_matrix <- cor(numeric_cols, use = "complete.obs")
cor_melt <- melt(cor_matrix)
ggplot(cor_melt, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(
low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
plot.title = element_text(face = "bold")
) +
labs(title = "Correlation Matrix", x = "Features", y = "Features")
}
# Function to create all exploratory plots
create_exploratory_plots <- function(data) {
# Define dynamic ranges
co_gt_limits <- c(-10, 10)
ozone_sensor_limits <- c(200, 2500)
temp_limits <- c(-10, 40)
# Create individual plots (reusing your existing plot code but with improved styling)
plot1 <- ggplot(data, aes(x = `NOx(GT)`, y = `CO(GT)`)) +
geom_point(alpha = 0.6, color = "steelblue", size = 1) +
geom_smooth(method = "lm", se = TRUE, color = "darkred", linetype = "dashed", size = 1) +
scale_y_continuous(limits = co_gt_limits) +
scale_x_continuous(limits = c(0, 500)) +
labs(
title = "NOx(GT) vs CO(GT)",
x = "NOx(GT) (Nitrogen Oxides)",
y = "CO(GT) (Carbon Monoxide)"
) +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# Add remaining plots similar to your original code...
# Return list of plots for flexible arrangement
list(
nox_co = plot1
# Add other plots to the list
)
}
# Main analysis pipeline
analyze_air_quality <- function(data_path) {
# Read data
air_quality_data <- read_excel(data_path, sheet = "AirQualityUCI")
# Define pollutant columns
pollutant_columns <- c("CO(GT)", "NOx(GT)", "NO2(GT)")
# Process data
processed_data <- air_quality_data %>%
create_categorical_features() %>%
clean_data(pollutant_columns) %>%
create_derived_features()
# Create train/test split
set.seed(123)
data_split <- initial_split(processed_data, prop = 0.7)
train_data <- training(data_split)
test_data <- testing(data_split)
# Generate plots
correlation_plot <- plot_correlation_matrix(processed_data)
exploratory_plots <- create_exploratory_plots(processed_data)
# Return results
list(
processed_data = processed_data,
train_data = train_data,
test_data = test_data,
correlation_plot = correlation_plot,
exploratory_plots = exploratory_plots
)
}
results <- analyze_air_quality("AirQualityUCI.xlsx")
# Access processed data
processed_data <- results$processed_data
# View correlation plot
print(results$correlation_plot)
# Access exploratory plots
print(results$exploratory_plots$nox_co)
library(readxl)
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(patchwork)
library(lubridate)
library(zoo)
library(reshape2)
air_quality_data <- read_excel("AirQualityUCI.xlsx", sheet = "AirQualityUCI")
# Define pollutant columns based on existing column names
pollutant_columns <- c("CO(GT)", "NOx(GT)", "NO2(GT)")
# Grouping by Season and handling outliers in pollutant columns
air_quality_data <- air_quality_data |>
group_by(Season = case_when(
format(Date, "%m") %in% c("12", "01", "02") ~ "Winter",
format(Date, "%m") %in% c("03", "04", "05") ~ "Spring",
format(Date, "%m") %in% c("06", "07", "08") ~ "Summer",
format(Date, "%m") %in% c("09", "10", "11") ~ "Autumn"
)) |>
mutate(
across(all_of(pollutant_columns),
~ ifelse(. > quantile(., 0.95, na.rm = TRUE),
median(., na.rm = TRUE), .))
) |>
ungroup()
# Create additional categorical features
air_quality_data <- air_quality_data |>
mutate(
DayOfWeek = weekdays(Date),
Weekend = if_else(DayOfWeek %in% c("Saturday", "Sunday"), "Weekend", "Weekday"),
Month = format(Date, "%B"),
Hour = as.numeric(format(Time, "%H")),
TimeOfDay = case_when(
Hour >= 5 & Hour < 12 ~ "Morning",
Hour >= 12 & Hour < 17 ~ "Afternoon",
Hour >= 17 & Hour < 21 ~ "Evening",
TRUE ~ "Night"
),
# Temperature Categories
TempCategory = case_when(
T < 10 ~ "Cold",
T >= 10 & T <= 25 ~ "Moderate",
T > 25 ~ "Hot"
),
# Humidity Levels
HumidityLevel = case_when(
RH < 30 ~ "Low",
RH >= 30 & RH <= 60 ~ "Medium",
RH > 60 ~ "High"
)
)
# Handling missing values
air_quality_data <- air_quality_data |>
mutate(
across(c(`NOx(GT)`, `NO2(GT)`), ~ na_if(., -200))
) |>
drop_na()
# Normalize / Standardize Cont. Vars
air_quality_data <- air_quality_data |>
mutate(
across(c(T, RH, AH), ~ (. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE))
)
# Interaction term
air_quality_data <- air_quality_data |>
mutate(
Temp_Humidity_Interaction = T * RH,
CO_Temp_Interaction = `CO(GT)` * T
)
# Rolling average
air_quality_data <- air_quality_data |>
arrange(Date, Time) |> # Ensure data is sorted chronologically
mutate(
Rolling_CO = rollmean(`CO(GT)`, k = 5, fill = NA)
)
# Correlation Matrix
numeric_cols <- air_quality_data |>
select(where(is.numeric))
cor_matrix <- cor(numeric_cols, use = "complete.obs")
print(cor_matrix)
# Correlation Matrix Plot
numeric_cols <- air_quality_data |>
select(where(is.numeric))
cor_matrix <- cor(numeric_cols, use = "complete.obs")
cor_melt <- melt(cor_matrix)
ggplot(cor_melt, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
) +
labs(title = "Correlation Matrix", x = "Features", y = "Features")
# Split dataset
set.seed(123)
data_split <- initial_split(air_quality_data, prop = 0.7)
train_data <- training(data_split)
test_data <- testing(data_split)
library(readxl)
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(patchwork)
library(lubridate)
library(zoo)
library(reshape2)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(patchwork)
air_quality_data <- read_excel("AirQualityUCI.xlsx", sheet = "AirQualityUCI")
library(readxl)
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(patchwork)
library(lubridate)
library(zoo)
library(reshape2)
library(dplyr)
library(RColorBrewer)
air_quality_data <- read_excel("AirQualityUCI.xlsx", sheet = "AirQualityUCI")
# Define pollutant columns based on existing column names
pollutant_columns <- c("CO(GT)", "NOx(GT)", "NO2(GT)")
# Grouping by Season and handling outliers in pollutant columns
air_quality_data <- air_quality_data |>
group_by(Season = case_when(
format(Date, "%m") %in% c("12", "01", "02") ~ "Winter",
format(Date, "%m") %in% c("03", "04", "05") ~ "Spring",
format(Date, "%m") %in% c("06", "07", "08") ~ "Summer",
format(Date, "%m") %in% c("09", "10", "11") ~ "Autumn"
)) |>
mutate(
across(all_of(pollutant_columns),
~ ifelse(. > quantile(., 0.95, na.rm = TRUE),
median(., na.rm = TRUE), .))
) |>
ungroup()
# Create additional categorical features
air_quality_data <- air_quality_data |>
mutate(
DayOfWeek = weekdays(Date),
Weekend = if_else(DayOfWeek %in% c("Saturday", "Sunday"), "Weekend", "Weekday"),
Month = format(Date, "%B"),
Hour = as.numeric(format(Time, "%H")),
TimeOfDay = case_when(
Hour >= 5 & Hour < 12 ~ "Morning",
Hour >= 12 & Hour < 17 ~ "Afternoon",
Hour >= 17 & Hour < 21 ~ "Evening",
TRUE ~ "Night"
),
# Temperature Categories
TempCategory = case_when(
T < 10 ~ "Cold",
T >= 10 & T <= 25 ~ "Moderate",
T > 25 ~ "Hot"
),
# Humidity Levels
HumidityLevel = case_when(
RH < 30 ~ "Low",
RH >= 30 & RH <= 60 ~ "Medium",
RH > 60 ~ "High"
)
)
# Handling missing values
air_quality_data <- air_quality_data |>
mutate(
across(c(`NOx(GT)`, `NO2(GT)`), ~ na_if(., -200))
) |>
drop_na()
# Normalize / Standardize Cont. Vars
air_quality_data <- air_quality_data |>
mutate(
across(c(T, RH, AH), ~ (. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE))
)
# Interaction term
air_quality_data <- air_quality_data |>
mutate(
Temp_Humidity_Interaction = T * RH,
CO_Temp_Interaction = `CO(GT)` * T
)
# Rolling average
air_quality_data <- air_quality_data |>
arrange(Date, Time) |> # Ensure data is sorted chronologically
mutate(
Rolling_CO = rollmean(`CO(GT)`, k = 5, fill = NA)
)
# Correlation Matrix
numeric_cols <- air_quality_data |>
select(where(is.numeric))
cor_matrix <- cor(numeric_cols, use = "complete.obs")
print(cor_matrix)
# Correlation Matrix Plot
numeric_cols <- air_quality_data |>
select(where(is.numeric))
cor_matrix <- cor(numeric_cols, use = "complete.obs")
cor_melt <- melt(cor_matrix)
ggplot(cor_melt, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
) +
labs(title = "Correlation Matrix", x = "Features", y = "Features")
# Split dataset
set.seed(123)
data_split <- initial_split(air_quality_data, prop = 0.7)
train_data <- training(data_split)
test_data <- testing(data_split)
# Define dynamic ranges for CO(GT) and other key variables
co_gt_limits <- c(-10, 10) # Adjusted for better scaling based on actual values
ozone_sensor_limits <- c(200, 2500) # For ozone sensor data
temp_limits <- c(-10, 40) # Temperature range
# 1. Relationship Between NOx(GT) and CO(GT)
plot1 <- ggplot(air_quality_data, aes(x = `NOx(GT)`, y = `CO(GT)`)) +
geom_point(alpha = 0.6, color = "steelblue", size = 1) +
geom_smooth(method = "lm", se = TRUE, color = "darkred", linetype = "dashed", size = 1) +
scale_y_continuous(limits = co_gt_limits) +
scale_x_continuous(limits = c(0, 500)) +
labs(title = "NOx(GT) vs CO(GT)",
x = "NOx(GT) (Nitrogen Oxides)",
y = "CO(GT) (Carbon Monoxide)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# 2. Average CO(GT) by Hour of Day
plot2 <- air_quality_data %>%
group_by(Hour) %>%
summarise(Average_CO = mean(`CO(GT)`, na.rm = TRUE)) %>%
ggplot(aes(x = Hour, y = Average_CO)) +
geom_line(color = "navy", size = 1.2) +
geom_point(color = "darkorange", size = 2) +
scale_y_continuous(limits = co_gt_limits) +
labs(title = "Average CO(GT) by Hour",
x = "Hour of Day",
y = "Average CO(GT)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# 3. Effect of Temperature on Benzene (C6H6)
plot3 <- ggplot(air_quality_data, aes(x = T, y = `C6H6(GT)`, color = Season)) +
geom_point(alpha = 0.6, size = 1.5) +
geom_smooth(method = "lm", se = TRUE, linetype = "dashed", size = 1) +
scale_color_brewer(palette = "Set1") +
scale_x_continuous(limits = temp_limits) +
scale_y_continuous(limits = c(-10, 15)) +
labs(title = "Temperature vs Benzene (C6H6)",
x = "Temperature (°C)",
y = "C6H6(GT) (Benzene)",
color = "Season") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"),
legend.position = "bottom")
# 4. Sensor Data vs CO(GT)
plot4 <- ggplot(air_quality_data, aes(x = `PT08.S1(CO)`, y = `CO(GT)`)) +
geom_point(alpha = 0.5, aes(color = `PT08.S1(CO)`), size = 1.5) +
geom_smooth(method = "lm", se = TRUE, color = "darkgreen", linetype = "solid", size = 1) +
scale_color_gradient(low = "yellow", high = "red") +
scale_y_continuous(limits = co_gt_limits) +
scale_x_continuous(limits = c(0, 2000)) +
labs(title = "Sensor Data vs CO(GT)",
x = "PT08.S1(CO) (Sensor Data)",
y = "CO(GT) (Carbon Monoxide)",
color = "Sensor Value") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# 5. Seasonal Trends in CO(GT)
plot5 <- ggplot(air_quality_data, aes(x = Season, y = `CO(GT)`, fill = Season)) +
geom_boxplot(outlier.shape = 21, outlier.fill = "red", outlier.size = 2, alpha = 0.7) +
scale_fill_brewer(palette = "Pastel2") +
scale_y_continuous(limits = co_gt_limits) +
labs(title = "Seasonal Trends in CO(GT)",
x = "Season",
y = "CO(GT) (Carbon Monoxide)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
# 6. Temperature-Humidity Interaction vs CO(GT)
plot6 <- ggplot(air_quality_data, aes(x = Temp_Humidity_Interaction, y = `CO(GT)`)) +
geom_point(alpha = 0.4, color = "purple", size = 1.5) +
geom_smooth(method = "lm", se = TRUE, color = "orange", size = 1.2, linetype = "dashed") +
scale_y_continuous(limits = co_gt_limits) +
scale_x_continuous(limits = c(0, 20)) +
labs(title = "Temperature-Humidity Interaction vs CO(GT)",
x = "Temperature-Humidity Interaction",
y = "CO(GT) (Carbon Monoxide)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# 7. NOx(GT) vs Ozone Sensor Data
plot7 <- ggplot(air_quality_data, aes(x = `NOx(GT)`, y = `PT08.S5(O3)`)) +
geom_point(alpha = 0.5, color = "cyan", size = 1.5) +
geom_smooth(method = "lm", se = TRUE, color = "blue", size = 1.2, linetype = "solid") +
scale_y_continuous(limits = ozone_sensor_limits) +
scale_x_continuous(limits = c(0, 500)) +
labs(title = "NOx(GT) vs Ozone Sensor",
x = "NOx(GT) (Nitrogen Oxides)",
y = "PT08.S5(O3) (Ozone Sensor)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# 8. Rolling Average of CO(GT) Over Time
plot8 <- ggplot(air_quality_data, aes(x = Date, y = Rolling_CO)) +
geom_line(color = "darkred", size = 1) +
scale_y_continuous(limits = co_gt_limits) +
labs(title = "Rolling Average of CO(GT) Over Time",
x = "Date",
y = "Rolling Average of CO(GT)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# Arrange plots with spacing and better proportions
final_plot <- (plot1 | plot2) / (plot3 | plot4) / (plot5 | plot6) / (plot7 | plot8) +
plot_layout(guides = "collect") & theme(legend.position = "bottom")
# Render the final plot
final_plot
# Define dynamic ranges for CO(GT) and other key variables
co_gt_limits <- c(-10, 10) # Adjusted for better scaling based on actual values
ozone_sensor_limits <- c(200, 2500) # For ozone sensor data
temp_limits <- c(-10, 40) # Temperature range
# 1. Relationship Between NOx(GT) and CO(GT)
plot1 <- ggplot(air_quality_data, aes(x = `NOx(GT)`, y = `CO(GT)`)) +
geom_point(alpha = 0.6, color = "steelblue", size = 1) +
geom_smooth(method = "lm", se = TRUE, color = "darkred", linetype = "dashed", size = 1) +
scale_y_continuous(limits = co_gt_limits) +
scale_x_continuous(limits = c(0, 500)) +
labs(title = "NOx(GT) vs CO(GT)",
x = "NOx(GT) (Nitrogen Oxides)",
y = "CO(GT) (Carbon Monoxide)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# 4. Sensor Data vs CO(GT)
plot4 <- ggplot(air_quality_data, aes(x = `PT08.S1(CO)`, y = `CO(GT)`)) +
geom_point(alpha = 0.5, aes(color = `PT08.S1(CO)`), size = 1.5) +
geom_smooth(method = "lm", se = TRUE, color = "darkgreen", linetype = "solid", size = 1) +
scale_color_gradient(low = "yellow", high = "red") +
scale_y_continuous(limits = co_gt_limits) +
scale_x_continuous(limits = c(0, 2000)) +
labs(title = "Sensor Data vs CO(GT)",
x = "PT08.S1(CO) (Sensor Data)",
y = "CO(GT) (Carbon Monoxide)",
color = "Sensor Value") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# 5. Seasonal Trends in CO(GT)
plot5 <- ggplot(air_quality_data, aes(x = Season, y = `CO(GT)`, fill = Season)) +
geom_boxplot(outlier.shape = 21, outlier.fill = "red", outlier.size = 2, alpha = 0.7) +
scale_fill_brewer(palette = "Pastel2") +
scale_y_continuous(limits = co_gt_limits) +
labs(title = "Seasonal Trends in CO(GT)",
x = "Season",
y = "CO(GT) (Carbon Monoxide)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"),
legend.position = "none")
# 7. NOx(GT) vs Ozone Sensor Data
plot7 <- ggplot(air_quality_data, aes(x = `NOx(GT)`, y = `PT08.S5(O3)`)) +
geom_point(alpha = 0.5, color = "cyan", size = 1.5) +
geom_smooth(method = "lm", se = TRUE, color = "blue", size = 1.2, linetype = "solid") +
scale_y_continuous(limits = ozone_sensor_limits) +
scale_x_continuous(limits = c(0, 500)) +
labs(title = "NOx(GT) vs Ozone Sensor",
x = "NOx(GT) (Nitrogen Oxides)",
y = "PT08.S5(O3) (Ozone Sensor)") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(face = "bold"))
# Arrange plots with spacing and better proportions
final_plot <- (plot1 | plot4) / (plot5 | plot7)  +
plot_layout(guides = "collect") & theme(legend.position = "bottom")
# Render the final plot
final_plot
