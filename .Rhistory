library(readr)
AirQualityUCI <- read_csv("AirQualityUCI.csv")
View(AirQualityUCI)
library(readxl)
AirQualityUCI <- read_excel("AirQualityUCI.xlsx")
View(AirQualityUCI)
library(readxl)
library(tidyverse)
file_path <- "AirQualityUCI.xlsx"
air_quality_data <- read_excel("AirQualityUCI.xlsx", sheet = "AirQualityUCI")
str(air_quality_data)
head(air_quality_data)
library(readxl)
library(tidyverse)
file_path <- "AirQualityUCI.xlsx"
air_quality_data <- read_excel("AirQualityUCI.xlsx", sheet = "AirQualityUCI")
str(air_quality_data)
head(air_quality_data)
air_quality_data <- air_quality_data |>
mutate(
DayOfWeek = weekdays(Date),
TimePeriod = case_when(
as.numeric(substr(Time, 1, 2)) < 6 ~ "Night",
as.numeric(substr(Time, 1, 2)) < 12 ~ "Morning",
as.numeric(substr(Time, 1, 2)) < 18 ~ "Afternoon",
TRUE ~ "Evening"
),
Month = months(Date),
TempRange = case_when(
T < 10 ~ "Cold",
T >= 10 & T < 20 ~ "Moderate",
T >= 20 ~ "Hot"
),
HumidityRange = case_when(
RH < 40 ~ "Low",
RH >= 40 & RH < 70 ~ "Medium",
RH >= 70 ~ "High"
)
)
ggplot(air_quality_data, aes(x = T, y = `CO(GT)`, color = TimePeriod)) +
geom_point(alpha = 0.5) +
labs(
title = "Temperature vs CO(GT)",
x = "Temperature (°C)",
y = "Carbon Monoxide (mg/m^3)"
)
ggplot(air_quality_data, aes(x = DayOfWeek, y = `CO(GT)`)) +
geom_boxplot() +
labs(
title = "CO(GT) by Day of the Week",
x = "Day of the Week",
y = "Carbon Monoxide (mg/m^3)"
)
# Summary statistics
summary(air_quality_data$`CO(GT)`)
table(air_quality_data$TimePeriod)
set.seed(123)
# Create splits
split <- initial_split(air_quality_data, prop = 0.7)
set.seed(123)
# Create splits
split <- initial_split(air_quality_data, prop = 0.7)
library(ggplot2)
air_quality_data <- air_quality_data |>
mutate(
DayOfWeek = weekdays(Date),
TimePeriod = case_when(
as.numeric(substr(Time, 1, 2)) < 6 ~ "Night",
as.numeric(substr(Time, 1, 2)) < 12 ~ "Morning",
as.numeric(substr(Time, 1, 2)) < 18 ~ "Afternoon",
TRUE ~ "Evening"
),
Month = months(Date),
TempRange = case_when(
T < 10 ~ "Cold",
T >= 10 & T < 20 ~ "Moderate",
T >= 20 ~ "Hot"
),
HumidityRange = case_when(
RH < 40 ~ "Low",
RH >= 40 & RH < 70 ~ "Medium",
RH >= 70 ~ "High"
)
)
ggplot(air_quality_data, aes(x = T, y = `CO(GT)`, color = TimePeriod)) +
geom_point(alpha = 0.5) +
labs(
title = "Temperature vs CO(GT)",
x = "Temperature (°C)",
y = "Carbon Monoxide (mg/m^3)"
)
ggplot(air_quality_data, aes(x = DayOfWeek, y = `CO(GT)`)) +
geom_boxplot() +
labs(
title = "CO(GT) by Day of the Week",
x = "Day of the Week",
y = "Carbon Monoxide (mg/m^3)"
)
# Summary statistics
summary(air_quality_data$`CO(GT)`)
table(air_quality_data$TimePeriod)
set.seed(123)
# Create splits
split <- initial_split(air_quality_data, prop = 0.7)
library(readxl)
library(tidyverse)
library(ggplot2)
library(tidymodels)
file_path <- "AirQualityUCI.xlsx"
air_quality_data <- read_excel("AirQualityUCI.xlsx", sheet = "AirQualityUCI")
str(air_quality_data)
head(air_quality_data)
air_quality_data <- air_quality_data |>
mutate(
DayOfWeek = weekdays(Date),
TimePeriod = case_when(
as.numeric(substr(Time, 1, 2)) < 6 ~ "Night",
as.numeric(substr(Time, 1, 2)) < 12 ~ "Morning",
as.numeric(substr(Time, 1, 2)) < 18 ~ "Afternoon",
TRUE ~ "Evening"
),
Month = months(Date),
TempRange = case_when(
T < 10 ~ "Cold",
T >= 10 & T < 20 ~ "Moderate",
T >= 20 ~ "Hot"
),
HumidityRange = case_when(
RH < 40 ~ "Low",
RH >= 40 & RH < 70 ~ "Medium",
RH >= 70 ~ "High"
)
)
ggplot(air_quality_data, aes(x = T, y = `CO(GT)`, color = TimePeriod)) +
geom_point(alpha = 0.5) +
labs(
title = "Temperature vs CO(GT)",
x = "Temperature (°C)",
y = "Carbon Monoxide (mg/m^3)"
)
ggplot(air_quality_data, aes(x = DayOfWeek, y = `CO(GT)`)) +
geom_boxplot() +
labs(
title = "CO(GT) by Day of the Week",
x = "Day of the Week",
y = "Carbon Monoxide (mg/m^3)"
)
# Summary statistics
summary(air_quality_data$`CO(GT)`)
table(air_quality_data$TimePeriod)
set.seed(123)
# Create splits
split <- initial_split(air_quality_data, prop = 0.7)
train_data <- training(split)
test_data <- testing(split)
# Further split train_data into training and validation
val_split <- initial_split(train_data, prop = 0.8)
train_data <- training(val_split)
val_data <- testing(val_split)
# Define a linear regression model
lm_model <- linear_reg() %>%
set_engine("lm")
# Create a recipe for preprocessing
lm_recipe <- recipe(`CO(GT)` ~ T + RH + TempRange + TimePeriod + HumidityRange, data = train_data) %>%
step_dummy(all_nominal(), -all_outcomes()) %>% # One-hot encode categorical variables
step_normalize(all_predictors())              # Normalize continuous predictors
# Create a workflow
lm_workflow <- workflow() %>%
add_model(lm_model) %>%
add_recipe(lm_recipe)
# Fit the model
lm_fit <- lm_workflow %>%
fit(data = train_data)
# Define a linear regression model
lm_model <- linear_reg() %>%
set_engine("lm")
# Create a recipe for preprocessing
lm_recipe <- recipe(`CO(GT)` ~ T + RH + TempRange + TimePeriod + HumidityRange, data = train_data) %>%
step_dummy(all_nominal(), -all_outcomes()) %>% # One-hot encode categorical variables
step_normalize(all_predictors())              # Normalize continuous predictors
# Create a workflow
lm_workflow <- workflow() %>%
add_model(lm_model) %>%
add_recipe(lm_recipe)
# Fit the model
lm_fit <- lm_workflow %>%
fit(data = train_data)
# Define a linear regression model
lm_model <- linear_reg() |>
set_engine("lm")
# Create a recipe for preprocessing
lm_recipe <- recipe(`CO(GT)` ~ T + RH + TempRange + TimePeriod + HumidityRange, data = train_data) %>%
step_dummy(all_nominal(), -all_outcomes()) |> # One-hot encode categorical variables
step_normalize(all_predictors())              # Normalize continuous predictors
# Create a workflow
lm_workflow <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_recipe)
# Fit the model
lm_fit <- lm_workflow |>
fit(data = train_data)
set.seed(123)
# Create splits
split <- initial_split(air_quality_data, prop = 0.7)
train_data <- training(split)
test_data <- testing(split)
# Further split train_data into training and validation
val_split <- initial_split(train_data, prop = 0.8)
train_data <- training(val_split)
val_data <- testing(val_split)
# Define a linear regression model
lm_model <- linear_reg() |>
set_engine("lm")
# Create a recipe for preprocessing
lm_recipe <- recipe(`CO(GT)` ~ T + RH + TempRange + TimePeriod + HumidityRange, data = train_data) %>%
step_dummy(all_nominal(), -all_outcomes()) |> # One-hot encode categorical variables
step_normalize(all_predictors())              # Normalize continuous predictors
# Create a workflow
lm_workflow <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_recipe)
# Fit the model
lm_fit <- lm_workflow |>
fit(data = train_data)
library(readxl)
library(tidyverse)
library(ggplot2)
library(tidymodels)
file_path <- "AirQualityUCI.xlsx"
air_quality_data <- read_excel("AirQualityUCI.xlsx", sheet = "AirQualityUCI")
str(air_quality_data)
head(air_quality_data)
lm_model <- linear_reg() |>
set_engine("lm")
lm_recipe <- recipe(`CO(GT)` ~ T + RH + TempRange + TimePeriod + HumidityRange, data = train_data) %>%
step_dummy(all_nominal(), -all_outcomes()) |>
step_normalize(all_predictors())
lm_workflow <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_recipe)
lm_fit <- lm_workflow |>
fit(data = train_data)
library(readxl)
library(tidyverse)
library(ggplot2)
library(tidymodels)
file_path <- "AirQualityUCI.xlsx"
air_quality_data <- read_excel("AirQualityUCI.xlsx", sheet = "AirQualityUCI")
str(air_quality_data)
head(air_quality_data)
